export async function sendAIAnalysisReport(applicationData: any, aiDecision: CreditDecision): Promise<void> {
  if (!process.env.EMAIL_FORM) {
    console.warn('EMAIL_FORM environment variable not set. Cannot send AI analysis report.');
    return;
  }

  // Define baseUrl at the top before using it
  const baseUrl = process.env.VERCEL_URL 
    ? `https://${process.env.VERCEL_URL}` 
    : process.env.NODE_ENV === 'production' 
      ? 'https://creditapp.alliancechemical.com' // Updated with actual domain
      : 'http://localhost:3000';

  // Special handling for fraud rejections
  const isFraudRejection = aiDecision.decision === 'DECLINE' && aiDecision.fraudRiskScore >= 60;
  
  const subject = isFraudRejection 
    ? `üö® FRAUD ALERT: ${applicationData.legalEntityName} (#${applicationData.id}) - AI REJECTED`
    : `ü§ñ 2-AGENT AI ANALYSIS: ${aiDecision.decision} - ${applicationData.legalEntityName} (#${applicationData.id})`;
  
  const getDecisionEmoji = (decision: string) => {
    switch (decision) {
      case 'APPROVE': return '‚úÖ';
      case 'CONDITIONAL': return '‚ö†Ô∏è';
      case 'DECLINE': return '‚ùå';
      case 'REVIEW': return 'üîç';
      default: return 'üìã';
    }
  };

  const getDecisionColor = (decision: string) => {
    switch (decision) {
      case 'APPROVE': return '#10b981'; // green
      case 'CONDITIONAL': return '#f59e0b'; // yellow
      case 'DECLINE': return '#ef4444'; // red
      case 'REVIEW': return '#3b82f6'; // blue
      default: return '#6b7280'; // gray
    }
  };

  const getRiskColor = (risk: string) => {
    switch (risk) {
      case 'LOW': return '#10b981';
      case 'MEDIUM': return '#f59e0b';
      case 'HIGH': return '#ef4444';
      case 'EXTREME': return '#7c2d12'; // dark red
      default: return '#6b7280';
    }
  };

  const textBody = `
ü§ñ 2-AGENT AI CREDIT ANALYSIS COMPLETE
=====================================

${isFraudRejection ? 'üö® FRAUD ALERT: APPLICATION AUTO-REJECTED BY AI üö®\n' : ''}
DECISION: ${aiDecision.decision} ${getDecisionEmoji(aiDecision.decision)}
Company: ${applicationData.legalEntityName}
Application ID: #${applicationData.id}
Analysis Date: ${new Date().toISOString()}

üìä CREDIT SUMMARY
- Credit Score: ${aiDecision.creditScore}/850
- Risk Level: ${aiDecision.riskLevel}
- Credit Limit: ${aiDecision.creditLimit.toLocaleString()}
- Payment Terms: ${aiDecision.paymentTerms}
${isFraudRejection ? `- Fraud Risk Score: ${aiDecision.fraudRiskScore}%` : ''}

üîç VERIFICATION SUMMARY
${aiDecision.verificationSummary}

üìù EXECUTIVE SUMMARY
${aiDecision.reasoning}

‚ö†Ô∏è CONDITIONS (${aiDecision.conditions.length})
${aiDecision.conditions.map((condition, i) => `${i+1}. ${condition}`).join('\n')}

üìã ADDITIONAL NOTES
${aiDecision.additionalNotes}

üíØ SCORE BREAKDOWN
${Object.entries(aiDecision.scoreBreakdown).map(([key, value]) => `- ${key}: ${value > 0 ? '+' : ''}${value} points`).join('\n')}

=====================================

${isFraudRejection ? `
üö® FRAUD REJECTION - NO ACTION NEEDED üö®

This application was automatically rejected by our AI fraud detection system.
The applicant will NOT receive any notification of rejection.
No further action is required from Andre.

Fraud Indicators Detected:
${aiDecision.auditFlags.map(flag => `‚Ä¢ ${flag}`).join('\n')}
` : `
üë®‚Äçüíº ANDRE'S DECISION REQUIRED

APPROVE FOR $10,000: ${baseUrl}/api/credit-approval?id=${applicationData.id}&decision=APPROVE&amount=1000000
DENY APPLICATION: ${baseUrl}/api/credit-approval?id=${applicationData.id}&decision=DENY

Other amounts:
- $5,000: ${baseUrl}/api/credit-approval?id=${applicationData.id}&decision=APPROVE&amount=500000
- $15,000: ${baseUrl}/api/credit-approval?id=${applicationData.id}&decision=APPROVE&amount=1500000
- $25,000: ${baseUrl}/api/credit-approval?id=${applicationData.id}&decision=APPROVE&amount=2500000
- $50,000: ${baseUrl}/api/credit-approval?id=${applicationData.id}&decision=APPROVE&amount=5000000

What happens next:
- APPROVE: Customer gets welcome email with Net 30 terms
- DENY: Customer gets polite denial with CIA options
- All customer contacts will be notified automatically
`}

=====================================
This analysis was generated by our AI-powered credit processing system.
`;

  const htmlBody = `
<html>
<head>
  <style>
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
    .fraud-header { background: linear-gradient(135deg, #ef4444 0%, #7f1d1d 100%); }
    .decision-badge { display: inline-block; padding: 10px 20px; border-radius: 25px; font-weight: bold; font-size: 18px; margin: 10px 0; }
    .content { background: #f8fafc; padding: 30px; }
    .section { background: white; margin: 20px 0; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
    .fraud-alert { background: #fef2f2; border: 3px solid #ef4444; }
    .grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0; }
    .metric { text-align: center; padding: 15px; background: #f1f5f9; border-radius: 8px; }
    .metric-value { font-size: 24px; font-weight: bold; margin-bottom: 5px; }
    .conditions { background: #fef3c7; border-left: 4px solid #f59e0b; padding: 15px; margin: 15px 0; }
    .breakdown { background: #f0f9ff; padding: 15px; border-radius: 8px; }
    .breakdown-item { display: flex; justify-content: space-between; padding: 5px 0; border-bottom: 1px solid #e2e8f0; }
    .positive { color: #10b981; }
    .negative { color: #ef4444; }
    .approval-section { background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%); border: 3px solid #3b82f6; border-radius: 15px; padding: 30px; margin: 30px 0; text-align: center; }
    .approval-buttons { display: flex; gap: 20px; justify-content: center; margin: 25px 0; flex-wrap: wrap; }
    .btn { display: inline-block; padding: 15px 30px; border-radius: 10px; text-decoration: none; font-weight: bold; font-size: 16px; transition: all 0.3s ease; }
    .btn-approve { background: linear-gradient(135deg, #10b981 0%, #059669 100%); color: white; border: none; }
    .btn-approve:hover { background: linear-gradient(135deg, #059669 0%, #047857 100%); transform: translateY(-2px); box-shadow: 0 4px 8px rgba(16, 185, 129, 0.3); }
    .btn-deny { background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%); color: white; border: none; }
    .btn-deny:hover { background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%); transform: translateY(-2px); box-shadow: 0 4px 8px rgba(239, 68, 68, 0.3); }
    .amount-options { display: flex; gap: 10px; justify-content: center; margin: 20px 0; flex-wrap: wrap; }
    .amount-btn { padding: 8px 16px; background: #f1f5f9; border: 2px solid #e2e8f0; border-radius: 6px; text-decoration: none; color: #374151; font-weight: 500; }
    .amount-btn:hover { background: #e0f2fe; border-color: #3b82f6; }
    .footer { text-align: center; margin-top: 30px; padding: 20px; background: #1f2937; color: white; border-radius: 0 0 10px 10px; }
  </style>
</head>
<body>
  <div class="header ${isFraudRejection ? 'fraud-header' : ''}">
    <h1>${isFraudRejection ? 'üö® FRAUD ALERT: AI Credit Analysis Report' : 'ü§ñ 2-Agent AI Credit Analysis Report'}</h1>
    <div class="decision-badge" style="background-color: ${getDecisionColor(aiDecision.decision)};">
      ${getDecisionEmoji(aiDecision.decision)} ${aiDecision.decision}
    </div>
    <p><strong>${applicationData.legalEntityName}</strong> | Application #${applicationData.id}</p>
    <p>Analysis completed: ${new Date().toLocaleString()}</p>
  </div>

  <div class="content">
    ${isFraudRejection ? `
    <div class="section fraud-alert">
      <h2 style="color: #ef4444; margin-top: 0;">üö® FRAUD DETECTED - APPLICATION AUTO-REJECTED</h2>
      <p style="font-size: 18px; margin: 10px 0;">This application was automatically rejected by our AI fraud detection system.</p>
      <p><strong>Fraud Risk Score:</strong> ${aiDecision.fraudRiskScore}%</p>
      <p><strong>No action required from Andre.</strong> The applicant will NOT be notified.</p>
      <div style="margin-top: 20px; padding: 15px; background: #fee2e2; border-radius: 8px;">
        <h4 style="margin-top: 0;">Fraud Indicators Detected:</h4>
        <ul style="margin: 0; padding-left: 20px;">
          ${aiDecision.auditFlags.map(flag => `<li>${flag}</li>`).join('')}
        </ul>
      </div>
    </div>
    ` : ''}

    <div class="grid">
      <div class="metric">
        <div class="metric-value">${aiDecision.creditScore}/850</div>
        <div>Credit Score</div>
      </div>
      <div class="metric">
        <div class="metric-value" style="color: ${getRiskColor(aiDecision.riskLevel)};">${aiDecision.riskLevel}</div>
        <div>Risk Level</div>
      </div>
      <div class="metric">
        <div class="metric-value">${aiDecision.creditLimit.toLocaleString()}</div>
        <div>Credit Limit</div>
      </div>
      <div class="metric">
        <div class="metric-value">${aiDecision.paymentTerms}</div>
        <div>Payment Terms</div>
      </div>
    </div>

    <div class="section">
      <h3>üîç Verification Summary</h3>
      <p>${aiDecision.verificationSummary}</p>
    </div>

    <div class="section">
      <h3>üìù Executive Summary</h3>
      <p>${aiDecision.reasoning}</p>
    </div>

    ${aiDecision.conditions.length > 0 ? `
    <div class="conditions">
      <h3>‚ö†Ô∏è Conditions for Approval</h3>
      <ul>
        ${aiDecision.conditions.map(condition => `<li>${condition}</li>`).join('')}
      </ul>
    </div>
    ` : ''}

    <div class="section">
      <h3>üìã Additional Analysis Notes</h3>
      <div style="white-space: pre-line;">${aiDecision.additionalNotes}</div>
    </div>

    <div class="section">
      <h3>üíØ Credit Score Breakdown</h3>
      <div class="breakdown">
        ${Object.entries(aiDecision.scoreBreakdown).map(([key, value]) => `
          <div class="breakdown-item">
            <span>${key}</span>
            <span class="${value > 0 ? 'positive' : 'negative'}">${value > 0 ? '+' : ''}${value} points</span>
          </div>
        `).join('')}
      </div>
    </div>

    <div class="section">
      <h3>üìÑ Application Details</h3>
      <ul>
        <li><strong>Legal Entity:</strong> ${applicationData.legalEntityName}</li>
        <li><strong>Tax EIN:</strong> ${applicationData.taxEIN}</li>
        <li><strong>Contact:</strong> ${applicationData.buyerNameEmail}</li>
        <li><strong>Phone:</strong> ${applicationData.phoneNo}</li>
        <li><strong>DUNS:</strong> ${applicationData.dunsNumber || 'Not provided'}</li>
      </ul>
    </div>

    ${!isFraudRejection ? `
    <!-- APPROVAL SECTION -->
    <div class="approval-section">
      <h2 style="margin-top: 0; color: #1e40af;">üë®‚Äçüíº ANDRE'S DECISION REQUIRED</h2>
      <p style="font-size: 18px; margin: 15px 0;">Review the AI analysis above and make your credit decision:</p>
      
      <div class="approval-buttons">
        <a href="${baseUrl}/api/credit-approval?id=${applicationData.id}&decision=APPROVE&amount=1000000" 
           class="btn btn-approve">
          ‚úÖ APPROVE for $10,000
        </a>
        <a href="${baseUrl}/api/credit-approval?id=${applicationData.id}&decision=DENY" 
           class="btn btn-deny">
          ‚ùå DENY APPLICATION
        </a>
      </div>

      <div style="margin: 25px 0;">
        <p style="margin: 10px 0; color: #374151;"><strong>Or approve for a different amount:</strong></p>
        <div class="amount-options">
          <a href="${baseUrl}/api/credit-approval?id=${applicationData.id}&decision=APPROVE&amount=500000" class="amount-btn">$5,000</a>
          <a href="${baseUrl}/api/credit-approval?id=${applicationData.id}&decision=APPROVE&amount=1500000" class="amount-btn">$15,000</a>
          <a href="${baseUrl}/api/credit-approval?id=${applicationData.id}&decision=APPROVE&amount=2500000" class="amount-btn">$25,000</a>
          <a href="${baseUrl}/api/credit-approval?id=${applicationData.id}&decision=APPROVE&amount=5000000" class="amount-btn">$50,000</a>
        </div>
      </div>

      <div style="background: rgba(255,255,255,0.8); border-radius: 8px; padding: 15px; margin: 20px 0; font-size: 14px; color: #666;">
        <p style="margin: 0;"><strong>üìß What happens next:</strong></p>
        <ul style="margin: 10px 0; text-align: left; display: inline-block;">
          <li><strong>APPROVE:</strong> Customer gets welcome email with Net 30 terms</li>
          <li><strong>DENY:</strong> Customer gets polite denial with CIA options</li>
          <li>All customer contacts (buyer, AP, invoice emails) will be notified</li>
        </ul>
      </div>
    </div>
    ` : ''}
  </div>

  <div class="footer">
    <p>ü§ñ This analysis was generated by Alliance Chemical's 2-Agent AI Credit Processing System</p>
    <p>Agent 1: Fraud Detection (gpt-5-2025-08-07) | Agent 2: Credit Analysis (gpt-5-2025-08-07)</p>
  </div>
</body>
</html>
`;

  await sendEmail({
    to: process.env.EMAIL_FORM,
    subject: subject,
    text: textBody,
    html: htmlBody,
  }, {
    applicationId: applicationData.id,
    type: 'ai_analysis'
  });

  console.log('üìß AI Analysis report sent via email');
}import { db } from '@/lib/db';
import { customerApplications, tradeReferences } from '@/lib/schema';
import { eq } from 'drizzle-orm';
import { OPENAI_API_KEY } from '@/lib/config';
import { sendEmail } from '@/lib/email';
import { 
  verifyDomain, 
  verifyBusiness, 
  validatePhoneNumber, 
  validateAddress, 
  calculateEnhancedCreditScore 
} from '@/lib/verification';

interface CreditDecision {
  decision: 'APPROVE' | 'CONDITIONAL' | 'DECLINE' | 'REVIEW';
  creditScore: number;
  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'EXTREME';
  creditLimit: number;
  paymentTerms: string;
  reasoning: string;
  conditions: string[];
  additionalNotes: string;
  verificationSummary: string;
  scoreBreakdown: Record<string, number>;
  fraudRiskScore: number;
  auditFlags: string[];
}

interface FakeDataResult {
  isFake: boolean;
  reasons: string[];
  confidence: 'HIGH' | 'MEDIUM' | 'LOW';
  fraudProbability: number;
}

// ENHANCED HARDCORE FRAUD DETECTION PATTERNS
const HARDCORE_PATTERNS = {
  // Expanded profanity and inappropriate terms
  profanity: [
    'fuck', 'shit', 'damn', 'ass', 'bitch', 'crap', 'hell', 'piss', 'bastard', 
    'dick', 'cock', 'pussy', 'whore', 'fuk', 'sht', 'azz', 'b1tch', 'fck',
    'porn', 'sex', 'nude', 'xxx', 'cannabis', 'weed', '420', 'drug', 'meth'
  ],
  
  // Suspicious business name patterns
  suspiciousBusinessPatterns: [
    /^[A-Z]{3,4}\s*(inc|llc|corp)?$/i, // Just initials (ABC Inc)
    /^\d+\s*(inc|llc|corp)?$/i, // Just numbers (123 LLC)
    /^(new|best|top|great|super|mega|ultra)\s*(company|business|corp|inc|llc)$/i,
    /cash\s*(only|now|fast|quick)/i,
    /get\s*(rich|money|paid)\s*(quick|fast|now)/i,
    /(pyramid|scheme|mlm|ponzi)/i,
    /no\s*(credit|questions|verification)/i,
    /^[a-z]+ [a-z]+$/i, // Just two lowercase words (like "andgelo dee")
    /^(john|jane|joe|bob|alice|test)\s*(doe|smith|jones|user)?$/i, // Common test names
  ],
  
  // Known scammer patterns
  scammerPatterns: [
    'nigerian', 'prince', 'lottery', 'winner', 'inheritance',
    'offshore', 'tax haven', 'anonymous', 'untraceable'
  ],
  
  // Suspicious email patterns
  suspiciousEmailDomains: [
    'guerrillamail.com', 'mailinator.com', '10minutemail.com', 'tempmail.com',
    'throwaway.email', 'getnada.com', 'temp-mail.org', 'maildrop.cc',
    'yopmail.com', 'sharklasers.com', 'spam4.me', 'grr.la'
  ],
  
  // High-risk industries
  highRiskIndustries: [
    'cryptocurrency', 'crypto', 'bitcoin', 'forex', 'trading',
    'gambling', 'casino', 'betting', 'adult', 'escort',
    'payday', 'loan', 'advance', 'mlm', 'network marketing'
  ]
};

function detectFakeData(application: any): FakeDataResult {
  const reasons: string[] = [];
  let confidence: 'HIGH' | 'MEDIUM' | 'LOW' = 'LOW';
  let fraudScore = 0;

  const companyName = (application.legalEntityName || '').toLowerCase().trim();
  const email = (application.buyerNameEmail || '').toLowerCase();
  const description = (application.businessDescription || '').toLowerCase();
  const phone = (application.phoneNo || '').replace(/\D/g, '');
  
  // ENHANCED: Check for person names as company names
  const personNamePattern = /^[a-z]+ [a-z]+$/i;
  const commonFirstNames = ['john', 'jane', 'joe', 'bob', 'alice', 'mary', 'james', 'robert', 'michael', 'david', 'angelo', 'andgelo'];
  const commonLastNames = ['doe', 'smith', 'jones', 'brown', 'davis', 'miller', 'wilson', 'moore', 'taylor', 'anderson', 'dee'];
  
  // Check if company name looks like a person's name
  if (personNamePattern.test(companyName)) {
    const nameParts = companyName.split(' ');
    const firstName = nameParts[0]?.toLowerCase();
    const lastName = nameParts[1]?.toLowerCase();
    
    if (commonFirstNames.some(name => firstName?.includes(name)) || 
        commonLastNames.some(name => lastName?.includes(name))) {
      reasons.push(`üö® PERSON NAME AS COMPANY: "${companyName}" is not a business name`);
      confidence = 'HIGH';
      fraudScore += 50;
    } else {
      reasons.push(`üö® SUSPICIOUS NAME FORMAT: "${companyName}" appears to be a person's name`);
      confidence = 'HIGH';
      fraudScore += 40;
    }
  }
  
  // HARDCORE PROFANITY CHECK
  for (const word of HARDCORE_PATTERNS.profanity) {
    if (companyName.includes(word) || description.includes(word)) {
      reasons.push(`üö® PROFANITY/INAPPROPRIATE: "${word}" detected`);
      confidence = 'HIGH';
      fraudScore += 30;
    }
  }

  // SUSPICIOUS BUSINESS NAME PATTERNS
  for (const pattern of HARDCORE_PATTERNS.suspiciousBusinessPatterns) {
    if (pattern.test(companyName)) {
      reasons.push(`‚ö†Ô∏è SUSPICIOUS NAME PATTERN: Matches "${pattern}"`);
      confidence = 'HIGH';
      fraudScore += 25;
    }
  }

  // SCAMMER KEYWORD DETECTION
  for (const scamWord of HARDCORE_PATTERNS.scammerPatterns) {
    if (companyName.includes(scamWord) || description.includes(scamWord)) {
      reasons.push(`üö® SCAM INDICATOR: "${scamWord}" detected`);
      confidence = 'HIGH';
      fraudScore += 40;
    }
  }

  // DISPOSABLE EMAIL CHECK
  const emailDomain = email.split('@')[1];
  if (emailDomain && HARDCORE_PATTERNS.suspiciousEmailDomains.includes(emailDomain)) {
    reasons.push(`üö® DISPOSABLE EMAIL: ${emailDomain}`);
    confidence = 'HIGH';
    fraudScore += 35;
  }

  // FREE EMAIL FOR BUSINESS
  const freeEmailDomains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com', 'aol.com'];
  if (emailDomain && freeEmailDomains.includes(emailDomain)) {
    reasons.push(`‚ö†Ô∏è FREE EMAIL SERVICE: ${emailDomain} (unprofessional for business)`);
    if (confidence === 'LOW') confidence = 'MEDIUM';
    fraudScore += 15;
  }

  // GIBBERISH DETECTION - Enhanced
  const nameWords = companyName.split(/\s+/);
  const consonantClusters = nameWords.filter((word: string) => {
    const consonantRatio = (word.match(/[^aeiou]/gi) || []).length / word.length;
    return word.length > 3 && consonantRatio > 0.75;
  });
  
  if (consonantClusters.length > nameWords.length * 0.5) {
    reasons.push('üö® GIBBERISH DETECTED: Excessive consonant clusters');
    confidence = 'HIGH';
    fraudScore += 20;
  }

  // REPEATED PATTERNS
  if (/(.{2,})\1{2,}/.test(companyName)) {
    reasons.push('üö® REPEATED PATTERN: Suspicious character repetition');
    confidence = 'HIGH';
    fraudScore += 25;
  }

  // ENHANCED: Repeated digits in phone number
  if (/(\d)\1{4,}/.test(phone)) {
    reasons.push(`üö® FAKE PHONE: Repeated digits "${phone}"`);
    confidence = 'HIGH';
    fraudScore += 45;
  }

  // KEYBOARD MASHING DETECTION
  const keyboardPatterns = ['qwerty', 'asdf', 'zxcv', 'qazwsx', 'qwertyuiop'];
  for (const pattern of keyboardPatterns) {
    if (companyName.includes(pattern)) {
      reasons.push(`üö® KEYBOARD MASHING: "${pattern}" detected`);
      confidence = 'HIGH';
      fraudScore += 30;
    }
  }

  // PHONE NUMBER VALIDATION - EXTREME
  // Check for movie/TV phone numbers
  if (phone.startsWith('555') && phone.length === 10) {
    reasons.push(`üö® FAKE PHONE: Hollywood 555 number`);
    confidence = 'HIGH';
    fraudScore += 40;
  }

  // Check for sequential patterns
  if (/0123456789|9876543210|1234567890/.test(phone)) {
    reasons.push(`üö® FAKE PHONE: Sequential pattern detected`);
    confidence = 'HIGH';
    fraudScore += 35;
  }

  // Check for all same digits
  if (/^(\d)\1+$/.test(phone) && phone.length >= 10) {
    reasons.push(`üö® FAKE PHONE: All digits are the same`);
    confidence = 'HIGH';
    fraudScore += 50;
  }

  // EIN DEEP VALIDATION
  const ein = (application.taxEIN || '').replace(/\D/g, '');
  
  // Check for repeated digits in EIN
  if (/(\d)\1{3,}/.test(ein)) {
    reasons.push(`üö® FAKE EIN: Repeated digits pattern`);
    confidence = 'HIGH';
    fraudScore += 40;
  }
  
  if (ein.length === 9) {
    // Check first two digits (should be valid IRS prefixes)
    const prefix = parseInt(ein.substring(0, 2));
    const validPrefixes = [
      ...Array.from({length: 7}, (_, i) => i + 1), // 01-06
      ...Array.from({length: 6}, (_, i) => i + 10), // 10-16
      20, 24, 25, 26, 27, // Various states
      ...Array.from({length: 18}, (_, i) => i + 30), // 30-47
      ...Array.from({length: 38}, (_, i) => i + 50), // 50-87
      ...Array.from({length: 8}, (_, i) => i + 90), // 90-95, 98, 99
    ];
    
    if (!validPrefixes.includes(prefix)) {
      reasons.push(`üö® INVALID EIN PREFIX: ${prefix} not issued by IRS`);
      confidence = 'HIGH';
      fraudScore += 45;
    }
  }

  // ADDRESS QUALITY CHECK
  const address = (application.billToAddress || '').toLowerCase();
  const poBoxPattern = /^(po box|p\.o\. box|post office box)/i;
  const suspiciousAddressWords = ['nowhere', 'fake street', 'test avenue', '123 main', 'none', 'n/a', 'na'];
  
  if (poBoxPattern.test(address)) {
    reasons.push('‚ö†Ô∏è PO BOX ADDRESS: Higher risk for B2B credit');
    fraudScore += 10;
  }

  for (const suspicious of suspiciousAddressWords) {
    if (address.includes(suspicious)) {
      reasons.push(`üö® FAKE ADDRESS: Contains "${suspicious}"`);
      confidence = 'HIGH';
      fraudScore += 30;
    }
  }

  // BUSINESS DESCRIPTION ANALYSIS
  if (!description || description.length < 20) {
    reasons.push('üö® NO BUSINESS DESCRIPTION: Required field missing or too short');
    confidence = 'HIGH';
    fraudScore += 30;
  }

  if (description && description.length > 20) {
    const uniqueWords = new Set(description.split(/\s+/));
    const repetitionRatio = description.split(/\s+/).length / uniqueWords.size;
    
    if (repetitionRatio > 3) {
      reasons.push('üö® REPETITIVE DESCRIPTION: Same words repeated excessively');
      confidence = 'HIGH';
      fraudScore += 25;
    }
  }

  // HIGH-RISK INDUSTRY CHECK
  for (const riskyTerm of HARDCORE_PATTERNS.highRiskIndustries) {
    if (companyName.includes(riskyTerm) || description.includes(riskyTerm)) {
      reasons.push(`‚ö†Ô∏è HIGH-RISK INDUSTRY: "${riskyTerm}" detected`);
      fraudScore += 20;
    }
  }

  // MISSING TRADE REFERENCES - Major red flag
  const hasTradeRefs = application.trade1Name || application.trade2Name || application.trade3Name;
  if (!hasTradeRefs) {
    reasons.push('üö® NO TRADE REFERENCES: Zero references provided');
    confidence = confidence === 'LOW' ? 'MEDIUM' : confidence;
    fraudScore += 35;
  }

  // Calculate final fraud probability
  const fraudProbability = Math.min(fraudScore, 100);

  // Adjust confidence based on total fraud score
  if (fraudProbability >= 70) {
    confidence = 'HIGH';
  } else if (fraudProbability >= 40) {
    confidence = 'MEDIUM';
  }

  return {
    isFake: reasons.length > 0,
    reasons,
    confidence,
    fraudProbability
  };
}

// ü§ñ AGENT 1: FRAUD DETECTION (gpt-5-2025-08-07)
async function runFraudDetectionAgent(application: any): Promise<{
  isFraud: boolean;
  confidence: number;
  reasons: string[];
  shouldProceed: boolean;
}> {
  // Always run basic fraud detection first
  const basicCheck = detectFakeData(application);
  
  // If basic check finds high confidence fraud, return immediately
  if (basicCheck.fraudProbability >= 60) {
    return {
      isFraud: true,
      confidence: basicCheck.fraudProbability,
      reasons: basicCheck.reasons,
      shouldProceed: false
    };
  }
  
  if (!OPENAI_API_KEY) {
    console.warn('‚ö†Ô∏è OpenAI API key not configured - using enhanced basic fraud detection');
    return {
      isFraud: basicCheck.isFake,
      confidence: basicCheck.fraudProbability,
      reasons: basicCheck.reasons,
      shouldProceed: !basicCheck.isFake || basicCheck.confidence !== 'HIGH'
    };
  }

  const prompt = `You are a FRAUD DETECTION SPECIALIST. Your ONLY job is to identify fake, test, or fraudulent credit applications.

ANALYZE THIS APPLICATION FOR FRAUD:

Company Name: "${application.legalEntityName || 'NOT PROVIDED'}"
Tax EIN: "${application.taxEIN || 'NOT PROVIDED'}"
Email: "${application.buyerNameEmail || 'NOT PROVIDED'}"
Phone: "${application.phoneNo || 'NOT PROVIDED'}"
Address: "${application.billToAddress || 'NOT PROVIDED'}"
City/State: "${application.billToCity || 'NOT PROVIDED'}, ${application.billToState || 'NOT PROVIDED'}"
Business Description: "${application.businessDescription || 'NOT PROVIDED'}"
Trade References: ${application.trade1Name ? 'Yes' : 'NO'} 

FRAUD INDICATORS TO CHECK:
üö® Person names used as company names (like "John Doe" instead of "John Doe LLC")
üö® Nonsense company names (gibberish, repeated patterns, profanity)
üö® Sequential/repetitive phone numbers (555-1234, 111-1111, 55555555555, etc)
üö® Fake emails (test@test.com, fake@fake.com, etc)
üö® Invalid EIN patterns (all same digits, sequential numbers, repeated patterns)
üö® Missing or minimal business description
üö® No trade references provided
üö® Obvious test data keywords (test, demo, fake, sample, etc)
üö® Keyboard mashing patterns (asdf, qwerty, etc)

BE VERY STRICT: If it looks like a person's name without a business designation (LLC, Inc, Corp), it's probably fraud.

IMPORTANT: Even if fields are marked "NOT PROVIDED", still evaluate the overall application quality. Missing critical information should raise red flags.

Return ONLY valid JSON:
{
  "isFraud": true/false,
  "confidence": 0-100,
  "reasons": ["specific fraud indicators found"],
  "verdict": "REJECT/REVIEW/PROCEED",
  "explanation": "brief reason for decision"
}`;

  try {
    console.log('üïµÔ∏è AGENT 1: Running AI fraud detection...');
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-5-2025-08-07',
        messages: [
          {
            role: 'system',
            content: 'You are an expert fraud detection specialist. BE STRICT: Person names as company names are fraudulent. Identify fake/test data with high precision. Return ONLY valid JSON.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
        max_tokens: 500,
      }),
    });

    if (!response.ok) {
      throw new Error(`Fraud detection API error: ${response.status}`);
    }

    const result = await response.json();
    const content = result.choices[0]?.message?.content;

    if (!content) {
      throw new Error('No response from fraud detection agent');
    }

    const fraudAnalysis = JSON.parse(content);
    console.log(`üïµÔ∏è AGENT 1: Fraud confidence = ${fraudAnalysis.confidence}%`);

    // Combine AI results with basic check
    const combinedReasons = [...new Set([...basicCheck.reasons, ...(fraudAnalysis.reasons || [])])];
    const combinedConfidence = Math.max(basicCheck.fraudProbability, fraudAnalysis.confidence);

    return {
      isFraud: fraudAnalysis.isFraud || basicCheck.isFake,
      confidence: combinedConfidence,
      reasons: combinedReasons,
      shouldProceed: fraudAnalysis.verdict === 'PROCEED' && combinedConfidence < 60
    };

  } catch (error) {
    console.error('‚ùå AGENT 1: Fraud detection failed:', error);
    return {
      isFraud: basicCheck.isFake,
      confidence: basicCheck.fraudProbability,
      reasons: basicCheck.reasons,
      shouldProceed: !basicCheck.isFake || basicCheck.confidence !== 'HIGH'
    };
  }
}

// ü§ñ AGENT 2: CREDIT ANALYSIS (gpt-5-2025-08-07)
async function runCreditAnalysisAgent(
  application: any, 
  verificationData: any, 
  creditScore: any,
  systemDecision: any
): Promise<{
  finalDecision: string;
  reasoning: string;
  riskAdjustment: string;
  conditions: string[];
  analysis: string;
}> {
  if (!OPENAI_API_KEY) {
    return {
      finalDecision: systemDecision.decision,
      reasoning: `System analysis: Score ${creditScore.score}/850, Risk ${systemDecision.riskLevel}`,
      riskAdjustment: 'No adjustment',
      conditions: systemDecision.conditions,
      analysis: 'Basic system analysis completed'
    };
  }

  const prompt = `You are a SENIOR CREDIT ANALYST reviewing a legitimate business credit application.

The FRAUD DETECTION AGENT has already cleared this application as legitimate.

APPLICATION DATA:
Company: ${application.legalEntityName || 'NOT PROVIDED'}
Tax EIN: ${application.taxEIN || 'NOT PROVIDED'}
DUNS: ${application.dunsNumber || 'Not provided'}
Industry: ${application.industry || 'NOT PROVIDED'}
Employees: ${application.numberOfEmployees || 'NOT PROVIDED'}
Years in Business: ${application.yearsSinceIncorporation || 'NOT PROVIDED'}
Requested Credit: ${application.requestedCreditAmount ? '$' + application.requestedCreditAmount.toLocaleString() : 'NOT PROVIDED'}
Trade References Provided: ${application.trade1Name ? 'Yes' : 'NO'}

VERIFICATION RESULTS:
- Business Registration: ${verificationData.business?.isValid ? 'VALID' : 'INVALID'}
- Domain Verification: ${verificationData.domain?.isValid ? 'CLEAN' : 'SUSPICIOUS'}
- Phone Type: ${verificationData.phone?.type || 'Unknown'}
- Address Type: ${verificationData.address?.type || 'Unknown'}

SYSTEM CREDIT SCORE: ${creditScore.score}/850
SYSTEM RECOMMENDATION: ${systemDecision.decision} - $${systemDecision.limit?.toLocaleString()} @ ${systemDecision.terms}

SCORE BREAKDOWN:
${Object.entries(creditScore.breakdown || {}).map(([k,v]) => `‚Ä¢ ${k}: ${v} points`).join('\n')}

‚ö†Ô∏è CRITICAL RULES:
1. If score is below 400, you MUST recommend DECLINE or REVIEW, not CONDITIONAL.
2. Be EXTREMELY STRICT with applications missing critical information (company name, EIN, etc.)
3. Missing information = higher risk = lower credit limit or decline
4. Maintain professional audit standards - this is real money at risk

As the credit analyst, provide your STRICT professional assessment:

Return ONLY valid JSON:
{
  "approveSystemDecision": true/false,
  "finalDecision": "APPROVE/CONDITIONAL/DECLINE/REVIEW",
  "creditLimit": number,
  "paymentTerms": "Net 30/Net 15/COD",
  "riskLevel": "LOW/MEDIUM/HIGH",
  "keyStrengths": ["positive factors"],
  "concerns": ["risk factors including any missing critical data"],
  "conditions": ["required conditions if conditional"],
  "reasoning": "professional analysis summary emphasizing completeness and risk",
  "confidence": 0-100
}`;

  try {
    console.log('üíº AGENT 2: Running credit analysis...');
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-5-2025-08-07',
        messages: [
          {
            role: 'system',
            content: 'You are a senior credit analyst. BE STRICT with low scores. Score below 400 = DECLINE or REVIEW only. Return ONLY valid JSON.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.2,
        max_tokens: 800,
      }),
    });

    if (!response.ok) {
      throw new Error(`Credit analysis API error: ${response.status}`);
    }

    const result = await response.json();
    const content = result.choices[0]?.message?.content;

    if (!content) {
      throw new Error('No response from credit analysis agent');
    }

    const creditAnalysis = JSON.parse(content);
    console.log(`üíº AGENT 2: Final decision = ${creditAnalysis.finalDecision}`);

    return {
      finalDecision: creditAnalysis.finalDecision,
      reasoning: creditAnalysis.reasoning,
      riskAdjustment: creditAnalysis.approveSystemDecision ? 'Approved system recommendation' : 'Adjusted system recommendation',
      conditions: creditAnalysis.conditions || [],
      analysis: `Strengths: ${creditAnalysis.keyStrengths?.join(', ')} | Concerns: ${creditAnalysis.concerns?.join(', ')}`
    };

  } catch (error) {
    console.error('‚ùå AGENT 2: Credit analysis failed:', error);
    return {
      finalDecision: systemDecision.decision,
      reasoning: `Fallback system analysis: Score ${creditScore.score}/850`,
      riskAdjustment: 'System fallback',
      conditions: systemDecision.conditions,
      analysis: 'Credit analysis agent unavailable - using system decision'
    };
  }
}

export async function processApplicationWithAI(applicationId: number): Promise<CreditDecision> {
  console.log(`ü§ñ AI PROCESSOR: Starting analysis for application #${applicationId}`);

  if (!db) {
    throw new Error('Database connection not available');
  }

  // Fetch application data
  const [application] = await db
    .select()
    .from(customerApplications)
    .where(eq(customerApplications.id, applicationId))
    .limit(1);

  if (!application) {
    throw new Error('Application not found');
  }

  // üö® AGENT 1: FRAUD DETECTION AGENT (gpt-5-2025-08-07)
  console.log('ü§ñ Running 2-Agent Credit Analysis System...');
  console.log('üïµÔ∏è AGENT 1: Starting fraud detection screening...');
  
  const fraudResult = await runFraudDetectionAgent(application);
  
  if (fraudResult.isFraud && !fraudResult.shouldProceed) {
    console.log(`üö® AGENT 1: FRAUD DETECTED - Confidence ${fraudResult.confidence}%`);
    console.log(`üö® Reasons: ${fraudResult.reasons.join(', ')}`);
    
    return {
      decision: 'DECLINE',
      creditScore: 0,
      riskLevel: 'EXTREME',
      creditLimit: 0,
      paymentTerms: 'Cash in Advance Only',
      reasoning: `üö® APPLICATION REJECTED BY AI FRAUD DETECTION AGENT\n\nThis application has been automatically rejected by our AI fraud detection specialist due to obvious fake or test data submission:\n\n${fraudResult.reasons.map(r => `‚Ä¢ ${r}`).join('\n')}\n\nOur gpt-5 AI agent determined this application contains fraudulent patterns with ${fraudResult.confidence}% confidence.\n\nTo submit a legitimate application, please use real business information including:\n‚Ä¢ Actual company name (no person names or repetitive patterns)\n‚Ä¢ Valid business phone number (no repeated digits)\n‚Ä¢ Real Tax EIN from IRS\n‚Ä¢ Legitimate business email address\n‚Ä¢ Complete business description\n‚Ä¢ At least one trade reference\n\nFor assistance with a legitimate application, contact sales@alliancechemical.com`,
      conditions: ['Resubmit with legitimate business information'],
      additionalNotes: `ü§ñ REJECTED BY AI FRAUD DETECTION AGENT (gpt-5-2025-08-07)\n\nFraud Confidence: ${fraudResult.confidence}%\nFlags Raised: ${fraudResult.reasons.length}\nAgent Decision: Do not proceed to credit analysis\n\nThis application was rejected before any credit analysis to prevent waste of computational resources on obviously fraudulent submissions.`,
      verificationSummary: 'Verification skipped - fraud detected by AI agent during pre-screening',
      scoreBreakdown: {
        'AI Fraud Detection': -1000,
        'Application Quality': 0,
        'Business Verification': 0,
        'Domain Verification': 0,
        'Phone Verification': 0,
        'Address Verification': 0,
        'Trade References': 0,
        'DUNS Verification': 0
      },
      fraudRiskScore: fraudResult.confidence,
      auditFlags: fraudResult.reasons
    };
  }
  
  // Log fraud warnings but continue to credit analysis
  if (fraudResult.isFraud && fraudResult.shouldProceed) {
    console.log(`‚ö†Ô∏è AGENT 1: SUSPICIOUS patterns detected (${fraudResult.confidence}% confidence) but proceeding to credit analysis...`);
    console.log(`‚ö†Ô∏è Flags: ${fraudResult.reasons.join(', ')}`);
  } else {
    console.log(`‚úÖ AGENT 1: Application cleared fraud screening - proceeding to credit analysis`);
  }

  // Fetch trade references
  const tradeReferencesData = await db
    .select()
    .from(tradeReferences)
    .where(eq(tradeReferences.applicationId, applicationId));

  console.log('üîç AI PROCESSOR: Starting enhanced verification...');
  
  // Perform enhanced verification
  const domainVerification = await verifyDomain(application.buyerNameEmail || '');
  const businessVerification = await verifyBusiness(
    application.legalEntityName || '', 
    application.taxEIN || '',
    application.billToCityStateZip?.split(',')[1]?.trim().split(' ')[0]
  );
  const phoneValidation = validatePhoneNumber(application.phoneNo || '');
  const addressValidation = validateAddress(application.billToAddress || '');

  const verificationData = {
    domain: domainVerification,
    business: businessVerification,
    phone: phoneValidation,
    address: addressValidation
  };

  // Calculate enhanced credit score
  const creditScore = calculateEnhancedCreditScore(application, verificationData);

  console.log('üîç AI PROCESSOR: Credit score calculated:', creditScore.score);

  // ENHANCED DETERMINISTIC DECISION LOGIC
  let finalDecision: 'APPROVE' | 'CONDITIONAL' | 'DECLINE' | 'REVIEW';
  let finalLimit: number;
  let finalTerms: string;
  let finalRiskLevel: 'LOW' | 'MEDIUM' | 'HIGH';
  let finalConditions: string[] = [];

  // STRICTER THRESHOLDS
  if (creditScore.score >= 750) {
    finalDecision = 'APPROVE';
    finalLimit = 50000;
    finalTerms = 'Net 30';
    finalRiskLevel = 'LOW';
  } else if (creditScore.score >= 650) {
    finalDecision = 'CONDITIONAL';
    finalLimit = 25000;
    finalTerms = 'Net 15';
    finalRiskLevel = 'MEDIUM';
    finalConditions = ['Provide additional trade references', 'Submit recent financial statements'];
  } else if (creditScore.score >= 500) {
    finalDecision = 'REVIEW';
    finalLimit = 10000;
    finalTerms = 'COD or Prepayment';
    finalRiskLevel = 'HIGH';
    finalConditions = ['Manual underwriting required', 'Additional documentation needed'];
  } else {
    // ANYTHING BELOW 500 IS AUTOMATIC DECLINE
    finalDecision = 'DECLINE';
    finalLimit = 0;
    finalTerms = 'Cash in Advance Only';
    finalRiskLevel = 'HIGH';
    finalConditions = ['Credit profile does not meet minimum requirements'];
  }

  console.log('üéØ SYSTEM: Initial recommendation:', finalDecision);

  // üíº AGENT 2: CREDIT ANALYSIS AGENT (gpt-5-2025-08-07)
  console.log('üíº AGENT 2: Starting detailed credit analysis...');
  
  const systemDecision = {
    decision: finalDecision,
    limit: finalLimit,
    terms: finalTerms,
    riskLevel: finalRiskLevel,
    conditions: finalConditions
  };
  
  const creditAnalysisResult = await runCreditAnalysisAgent(
    application,
    verificationData,
    creditScore,
    systemDecision
  );
  
  // Update final decision based on Agent 2's analysis
  finalDecision = creditAnalysisResult.finalDecision as any;
  finalLimit = determineLimit(creditAnalysisResult.finalDecision);
  finalTerms = determineTerms(creditAnalysisResult.finalDecision);
  finalRiskLevel = determineFinalRiskLevel(creditAnalysisResult.finalDecision);
  finalConditions = creditAnalysisResult.conditions;

  console.log(`üíº AGENT 2: Final decision = ${finalDecision} (${creditAnalysisResult.riskAdjustment})`);

  // Helper functions for Agent 2 decision mapping
  function determineLimit(decision: string): number {
    switch(decision) {
      case 'APPROVE': return 50000;
      case 'CONDITIONAL': return 25000;
      case 'REVIEW': return 10000;
      default: return 0;
    }
  }
  
  function determineTerms(decision: string): string {
    switch(decision) {
      case 'APPROVE': return 'Net 30';
      case 'CONDITIONAL': return 'Net 15';
      case 'REVIEW': return 'COD or Prepayment';
      default: return 'Cash in Advance Only';
    }
  }
  
  function determineFinalRiskLevel(decision: string): 'LOW' | 'MEDIUM' | 'HIGH' {
    switch(decision) {
      case 'APPROVE': return 'LOW';
      case 'CONDITIONAL': return 'MEDIUM';
      default: return 'HIGH';
    }
  }

  // Build the final decision
  const result: CreditDecision = {
    decision: finalDecision,
    creditScore: creditScore.score,
    riskLevel: finalRiskLevel,
    creditLimit: finalLimit,
    paymentTerms: finalTerms,
    reasoning: creditAnalysisResult.reasoning || `2-Agent AI analysis completed. Decision: ${finalDecision} based on credit score of ${creditScore.score}/850.`,
    conditions: finalConditions,
    additionalNotes: [
      `ü§ñ 2-AGENT AI ANALYSIS SYSTEM (gpt-5-2025-08-07)`,
      `Agent 1 - Fraud Detection: ${fraudResult.isFraud ? `‚ö†Ô∏è ${fraudResult.confidence}% confidence` : '‚úÖ Cleared'}`,
      `Agent 2 - Credit Analysis: ${creditAnalysisResult.analysis}`,
      `Verification Summary: Business ${businessVerification.isValid ? 'valid' : 'invalid'}, Domain ${domainVerification.isValid ? 'clean' : 'flagged'}`,
      `Score Breakdown: ${Object.entries(creditScore.breakdown).map(([k,v]) => `${k}: ${v}`).join(', ')}`
    ].join('\n\n'),
    verificationSummary: `Business: ${businessVerification.status}, Domain: ${domainVerification.isValid ? 'Valid' : 'Issues'}, Phone: ${phoneValidation.type}`,
    scoreBreakdown: creditScore.breakdown,
    fraudRiskScore: fraudResult.confidence,
    auditFlags: [...fraudResult.reasons, `2-Agent System: Score ${creditScore.score}`]
  };

  console.log('‚úÖ 2-AGENT SYSTEM: Analysis complete for application #' + applicationId);
  return result;
}